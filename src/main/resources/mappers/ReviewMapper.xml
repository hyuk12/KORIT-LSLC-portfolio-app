<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.korea.triplocation.repository.ReviewRepository">
	
	<resultMap type="com.korea.triplocation.domain.review.entity.Review" id="reviewMap">
		<id property="reviewId" column="review_id"/>
		<result property="userId" column="user_id"/>
		<result property="travelId" column="travel_id"/>
		<result property="reviewTitle" column="review_title"/>
		<result property="reviewContents" column="review_contents"/>
		<result property="reviewRating" column="review_rating"/>
		<result property="reviewCreateDate" column="review_create_date"/>
		<result property="startDate" column="start_date"/>
		<result property="endDate" column="end_date"/>
		<collection property="reviewImgs" javaType="list" resultMap="reviewImgMap"/>
	</resultMap>
	
	<resultMap type="com.korea.triplocation.domain.review.entity.ReviewImg" id="reviewImgMap">
		<id property="reviewImgId" column="review_img_id"/>
		<result property="reviewId" column="review_id"/>
		<result property="originName" column="origin_name"/>
		<result property="tempName" column="temp_name"/>
		<result property="imgSize" column="img_size"/>
	</resultMap>
	
	<resultMap id="schedule" type="com.korea.triplocation.domain.travel.entity.Schedule">
		<id column="schedule_id" property="scheduleId"/>
		<result column="travel_id" property="travelId"/>
		<result column="schedule_date" property="scheduleDate"/>
	</resultMap>
	
	<select id="getReviewListByUserId" resultMap="reviewMap">
		
		select
			rt.review_id,
		    rt.user_id,
		    rt.travel_id,
		    rt.review_title,
		    rt.review_contents,
		    rt.review_rating,
		    rt.review_create_date,
		    
		    rit.review_img_id,
		    rit.temp_name,
		    
		    min(st.schedule_date) as start_date,
		    max(st.schedule_date) as end_date
		from
			review_tb rt
		    left outer join review_img_tb rit on (rit.review_id = rt.review_id and rit.review_img_id = (select min(review_img_id) from review_img_tb _rit where _rit.review_id = rt.review_id))
		    left outer join schedule_tb st on (st.travel_id = rt.travel_id)
		where
			rt.user_id = #{userId}
		group by
			rt.review_id
		order by 
			rit.review_img_id ASC,
			rt.review_create_date ASC;
	
	</select>

	<select id="getReviewListByRating" resultMap="reviewMap">

		SELECT
			*
		FROM
			review_tb rt
			LEFT OUTER JOIN review_img_tb rit ON(rit.review_id = rt.review_id)
		order by
			review_create_date DESC LIMIT 5
	</select>

	<select id="getReviewByReviewId" resultMap="reviewMap">

		SELECT
			*
		FROM
			review_tb
		WHERE
		    review_id = #{reviewId}
	</select>
	
	<select id="getAllReviewList" resultMap="reviewMap">

		SELECT
			*
		FROM
			review_tb rt
				LEFT OUTER JOIN review_img_tb rit ON(rit.review_id = rt.review_id)
		group by
			rt.review_id
		order by
			rt.review_id DESC 
	</select>
	
	
	
	<select id="getReviewImgListByReviewId" resultMap="reviewImgMap">
	
		SELECT
			rit.review_img_id,
		    rit.review_id,
		    rit.origin_name,
		    rit.temp_name,
		    rit.img_size
		FROM
			review_img_tb rit
		WHERE
			rit.review_id = #{reviewId}
	
	</select>

	
	<insert id="registerReviews" parameterType="com.korea.triplocation.domain.review.entity.Review"
			useGeneratedKeys="true" keyProperty="reviewId">
			insert into review_tb
			values (0, #{userId}, #{travelId}, #{reviewContents}, #{reviewTitle}, now(), #{reviewRating} )
	</insert>
	
	<insert id="registerReviewImgs" parameterType="list">
			insert into review_img_tb
			values
			<foreach collection="list" item="reviewImg" separator=",">
				(0, #{reviewImg.reviewId}, #{reviewImg.originName}, #{reviewImg.tempName}, #{reviewImg.imgSize})
			</foreach>
	</insert>

	<update id="modifyReview">
		update
			review_tb
		set

		    review_title = #{reviewTitle},
		    review_contents = #{reviewContents},
		    review_rating = #{reviewRating},
		    review_create_date = now()
		where
		    review_id = #{reviewId}
	</update>

	<update id="modifyReviewImg">
		update
			review_img_tb
		set
			origin_name = #{reviewImg.originName},
			temp_name = #{reviewImg.tempName},
			img_size = #{reviewImg.imgSize}

		where
			review_id = #{reviewId} AND review_img_id = #{reviewImg.reviewImgId}
	</update>

	<delete id="deleteReviewImg" parameterType="list">
		delete
		from
		    review_img_tb
		where
		    review_img_id = #{reviewImgId}
	</delete>

	<delete id="deleteReviewImages" parameterType="int">
		DELETE FROM review_img_tb WHERE review_id = #{reviewId};
	</delete>

	<delete id="deleteReview" parameterType="int">
		DELETE FROM review_tb WHERE review_id = #{reviewId};
	</delete>


</mapper>